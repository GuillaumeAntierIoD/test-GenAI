import torch
from diffusers import FluxFillPipeline
from diffusers.utils import load_image
import time

# √âtape 1 : V√©rifier la disponibilit√© du GPU
if not torch.cuda.is_available():
    print("‚ùå Erreur : Ce script optimis√© n√©cessite un GPU (CUDA).")
    exit()

device = "cuda"
# On passe en float16, plus standard et compatible pour √©conomiser la m√©moire.
torch_dtype = torch.float16 
print("‚úÖ GPU d√©tect√© ! Configuration avanc√©e pour VRAM limit√©e en cours...")

# √âtape 2 : Charger les images (inchang√©)
try:
    image = load_image("https://huggingface.co/datasets/diffusers/diffusers-images-docs/resolve/main/cup.png")
    mask = load_image("https://huggingface.co/datasets/diffusers/diffusers-images-docs/resolve/main/cup_mask.png")
except Exception as e:
    print(f"Erreur lors du chargement des images : {e}")
    exit()

# √âtape 3 : Charger le pipeline
print("Chargement du mod√®le...")
pipe = FluxFillPipeline.from_pretrained(
    "black-forest-labs/FLUX.1-Fill-dev", 
    torch_dtype=torch_dtype
)

# √âtape 4 : Activer les optimisations m√©moire
# On active le d√©chargement du mod√®le principal sur le CPU.
pipe.enable_model_cpu_offload()
print("-> 'CPU Offloading' est activ√©.")

# NOUVELLE √âTAPE : On active le d√©coupage du VAE pour √©conomiser encore plus de VRAM.
pipe.enable_vae_slicing()
print("-> 'VAE Slicing' est activ√©.")

# √âtape 5 : Ex√©cuter l'inf√©rence
print("D√©but de la g√©n√©ration de l'image...")
start_time = time.time()

# --- Options √† ajuster ---
# On r√©duit encore la r√©solution. C'est le changement le plus important !
output_height = 768
output_width = 512
# -------------------------

image_result = pipe(
    prompt="a white paper cup",
    image=image,
    mask_image=mask,
    height=output_height,
    width=output_width,
    guidance_scale=3.0,
    num_inference_steps=50,
    max_sequence_length=512,
    generator=torch.Generator(device).manual_seed(0) 
).images[0]

end_time = time.time()
print(f"üéâ Image g√©n√©r√©e en {end_time - start_time:.2f} secondes !")

# √âtape 6 : Sauvegarder l'image
output_filename = "flux-fill-dev-result-vram-super-optimized.png"
image_result.save(output_filename)
print(f"Image sauvegard√©e sous le nom : {output_filename}")